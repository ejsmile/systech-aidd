name: Build, Test and Publish

on:
  push:
    branches: ['**']  # Все ветки
  pull_request:
    branches: [main]  # PR только на main

permissions:
  contents: read
  packages: write

jobs:
  # Backend тесты
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          uv pip install --system -e ".[dev]"
      
      - name: Run backend tests
        run: |
          uv run pytest tests/ -v --cov=src --cov-report=term-missing
        # Env vars настроены в tests/conftest.py - единственный источник правды
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Frontend тесты
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run frontend linter
        working-directory: frontend
        run: npm run lint
      
      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:run
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build

  # Docker образы
  build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]  # Запускаем только если тесты прошли
    strategy:
      matrix:
        include:
          - service: bot
            dockerfile: Dockerfile.backend
            context: .
          - service: api
            dockerfile: Dockerfile.backend
            context: .
          - service: frontend
            dockerfile: Dockerfile
            context: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ejsmile/systech-aidd-${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

