services:
  # PostgreSQL для тестов
  test-postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Docker-in-Docker proxy для testcontainers
  docker-proxy:
    image: alpine/socat
    command: tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - test-network

  # Тестовый раннер для backend
  test-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    env_file:
      - .env.test
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock  # Для testcontainers (если нужны)
    working_dir: /app
    command: pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=html
    depends_on:
      test-postgres:
        condition: service_healthy
      docker-proxy:
        condition: service_started
    environment:
      - DOCKER_HOST=tcp://docker-proxy:2375
      - TESTCONTAINERS_RYUK_DISABLED=true
      - TC_HOST=docker-proxy
      - USE_EXTERNAL_POSTGRES=true
    networks:
      - test-network

networks:
  test-network:
    driver: bridge

