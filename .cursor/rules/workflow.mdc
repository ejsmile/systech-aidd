---
alwaysApply: true
---
# Workflow разработки

## Цикл работы по итерации

### 1. Подготовка
- Прочитать текущую итерацию из `tasklist.md`
- Проверить все задачи и требования
- Изучить релевантные части `vision.md`

### 2. Согласование решения
**ДО начала реализации:**
- Предложить конкретное решение
- Показать **ключевые отрезки кода** для каждого файла
- Указать структуру классов/функций
- Дождаться **явного подтверждения**

### 3. Реализация
**ПОСЛЕ согласования:**
- Создать/изменить файлы согласно плану
- Следовать принципу **KISS**
- Следовать принципу **1 класс = 1 файл**
- Использовать `async/await` везде

### 4. Проверка
- Выполнить тестирование из раздела "Тест" итерации
- Убедиться, что код работает
- **Дождаться подтверждения** от разработчика

### 5. Фиксация прогресса
- Отметить выполненные задачи в `tasklist.md` (✅)
- Обновить статус итерации в таблице прогресса
- Обновить дату завершения

### 6. Коммит
- Сделать коммит с понятным сообщением
- Формат: `feat: <краткое описание итерации>`

### 7. Переход к следующей итерации
- Согласовать с разработчиком переход к следующей итерации
- **НЕ начинать** новую итерацию без подтверждения

---

## Правила

✅ **Делать:**
- Работать строго по плану
- Согласовывать решение ПЕРЕД реализацией
- Ждать подтверждения ПОСЛЕ реализации
- Обновлять tasklist.md
- Делать коммиты

❌ **НЕ делать:**
- Начинать реализацию без согласования
- Переходить к следующей задаче без подтверждения
- Делать несколько итераций за раз
- Отклоняться от vision.md
- Усложнять решения (анти-KISS)

---

## Шаблон согласования

```
### Итерация X: [Название]

**План реализации:**

1. Файл: `src/example.py`
   ```python
   class Example:
       def __init__(self, ...):
           ...
       
       async def method(self):
           ...
   ```

2. Файл: `src/other.py`
   ```python
   # Ключевые части кода
   ```

**Готов к реализации?**
```

---

## Шаблон коммита

```bash
feat: implement iteration X - [краткое описание]

- Задача 1
- Задача 2
- Задача 3

Tested: [описание проведенного теста]
```

