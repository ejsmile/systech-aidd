---
alwaysApply: false
---
# Workflow разработки

## Цикл работы по итерации

### 1. Подготовка
- Прочитать текущую итерацию из @tasklist.md {input0}
- Проверить все задачи и требования
- Изучить релевантные части @vision.md

### 2. Согласование решения
**ДО начала реализации:**
- Предложить конкретное решение
- Показать **ключевые отрезки кода** для каждого файла
- Указать структуру классов/функций
- Дождаться **явного подтверждения**

### 3. Реализация
**ПОСЛЕ согласования:**
- Создать/изменить файлы согласно плану
- Следовать принципу **KISS**
- Следовать принципу **1 класс = 1 файл**
- Использовать `async/await` везде

### 4. Проверка
**ОБЯЗАТЕЛЬНО после каждого изменения:**
- **Активировать виртуальное окружение** (если еще не активировано)
- **Запустить линтер:** `make quality` (форматирование, линтинг, проверка типов)
- **Запустить тесты с покрытием:** `make test-cov`
- **Проверить покрытие:** минимум 70% для измененных модулей
- Выполнить тестирование из раздела "Тест" итерации
- Убедиться, что все проверки прошли успешно
- **Дождаться подтверждения** от разработчика

### 5. Фиксация прогресса
- Отметить выполненные задачи в @tasklist.md (✅)
- Обновить статус итерации в таблице прогресса
- Обновить дату завершения

### 6. Коммит
- Сделать коммит с понятным сообщением
- Формат: `feat: <краткое описание итерации>`

### 7. Переход к следующей итерации
- Согласовать с разработчиком переход к следующей итерации
- **НЕ начинать** новую итерацию без подтверждения

---

## Виртуальное окружение

### Обязательное требование
**Все команды, тесты и запуски проекта выполняются ТОЛЬКО в виртуальном окружении.**

### Работа с uv

#### Создание виртуального окружения
```bash
uv venv
```

#### Активация виртуального окружения
```bash
# macOS/Linux
source .venv/bin/activate

# Windows
.venv\Scripts\activate
```

#### Установка зависимостей
```bash
# После активации виртуального окружения
uv pip install -e .
```

#### Запуск команд
```bash
# Все команды выполняются в активированном окружении
uv run python -m src.main

# Проверка качества кода (ОБЯЗАТЕЛЬНО после каждого изменения)
make quality      # Форматирование, линтинг, проверка типов
make test-cov     # Тесты с покрытием (минимум 70%)
```

### Правила
- ✅ Всегда активируй виртуальное окружение перед работой
- ✅ Используй `uv run` для запуска команд
- ✅ Устанавливай зависимости через `uv pip install`
- ❌ НЕ устанавливай пакеты глобально
- ❌ НЕ запускай команды вне виртуального окружения

---

## Правила

✅ **Делать:**
- Работать строго по плану
- Согласовывать решение ПЕРЕД реализацией
- Запускать `make quality` и `make test-cov` ПОСЛЕ каждого изменения
- Поддерживать покрытие тестами минимум 70%
- Ждать подтверждения ПОСЛЕ реализации
- Обновлять @tasklist.md
- Делать коммиты

❌ **НЕ делать:**
- Начинать реализацию без согласования
- Переходить к следующей задаче без подтверждения
- Делать несколько итераций за раз
- Отклоняться от @vision.md
- Усложнять решения (анти-KISS)

---

## Шаблон согласования

```
### Итерация X: [Название]

**План реализации:**

1. Файл: `src/example.py`
   ```python
   class Example:
       def __init__(self, ...):
           ...
       
       async def method(self):
           ...
   ```

2. Файл: `src/other.py`
   ```python
   # Ключевые части кода
   ```

**Готов к реализации?**
```

---

## Шаблон коммита

```bash
feat: implement iteration X - [краткое описание]

- Задача 1
- Задача 2
- Задача 3

Tested: [описание проведенного теста]
```

